#importing files
import plck
import time
import random

#This program connects to a N7745C and takes a power reading at the specified wavelength.
#One wavelength per channel


def run(N7745C, state, temperatureListK, temperature, returnedpower, returnedlum, wavelength):    
    p = len(wavelength)
    power = returnedpower
    luminance = returnedlum
    i = temperatureListK.index(temperature)
    #temp_values = []
            
    
    for j in range(p): #Photodiode
        w = wavelength[j] #Value of the current wavelength
        #time.sleep(0.25)
        #Read the power value of the channel
        
        temp_values = N7745C.query_ascii_values('read{}:power?'.format(j + 1))
        print(f"{temp_values} - query read power")
        
                    
        if state == 'calib':     #rajouter condition sur calib ou sample
            power[j][i] = temp_values[0]
            luminance[j][i] = plck.planck(w, temperature)
            
        elif state =='sample':
            
            #power[j] = temp_values[0] valeur modifié à vérifier avec le N7745C
            power[j] = temp_values[0]
            print(f"{power[j]} - power[j]")
            
    if state == 'calib':
        return power, luminance

    else: #we do not return luminance for the sample measurement
        return power
   
'''    
Luminance and Power matrices are defined like this :
    [ [X11, X12, ..., X1j, ..., X1p],   1
      [X21, X22, ..., X2j, ..., X2p],   |
                 ...                ,   |
      [Xi1, Xi2, ..., Xij, ..., Xip],   j
                 ...                    |
      [Xn1, Xn2, ..., Xnj, ..., Xnp] ]  V
                                        p (Index of Photodiode <=> Index of Wavelength)
                                        
     1 ------------ i --------------> n (Temperature)
'''

#def calibration(N7745C, temperatureListK, temperature, returnedpower, returnedlum, wavelength):
def calibration(N7745C, temperatureListK, temperature, returnedpower, returnedlum, wavelength):                    
    
    #Getting the values of wavelength, power and luminance
    returnedpower, returnedlum = run(N7745C, 'calib', temperatureListK, temperature, returnedpower, returnedlum, wavelength)
    return returnedpower, returnedlum